name: Read optfile

on:
  workflow_call:
    inputs:
      azure_client_id:
        required: false
        type: string
      azure_tenant_id:
        required: false
        type: string
      cloud_provider:
        required: true
        type: string
      environment_name:
        required: false
        type: string
      file_path:
        required: true
        type: string
      ref:
        required: false
        type: string
        default: ""
      runner:
        required: false
        type: string
        default: ubuntu-latest

    secrets:
      AZ_CLIENT_SECRET:
        required: false

    outputs:
      request_id:
        value: ${{ jobs.read_optfile.outputs.request_id }}
      azcli_version:
        value: ${{ jobs.read_optfile.outputs.azcli_version }}
      branch_ref:
        value: ${{ jobs.read_optfile.outputs.branch_ref }}
      deployments_all:
        value: ${{ jobs.read_optfile.outputs.all_deployments_json }}
      deployments_run_order_1_all:
        value: ${{ jobs.read_optfile.outputs.deployments_run_order_1_all }}
      deployments_run_order_1_apply:
        value: ${{ jobs.read_optfile.outputs.deployments_run_order_1_apply }}
      deployments_run_order_2_all:
        value: ${{ jobs.read_optfile.outputs.deployments_run_order_2_all }}
      deployments_run_order_2_apply:
        value: ${{ jobs.read_optfile.outputs.deployments_run_order_2_apply }}
      destroy_enabled:
        value: ${{ jobs.read_optfile.outputs.destroy_enabled }}
      destroy_pause_in_seconds:
        value: ${{ jobs.read_optfile.outputs.destroy_pause_in_seconds }}
      push_git_tag:
        value: ${{ jobs.read_optfile.outputs.push_git_tag }}
      remote_state_azure_plan_container_name:
        value: ${{ jobs.read_optfile.outputs.remote_state_azure_plan_container_name }}
      remote_state_azure_resource_group_name:
        value: ${{ jobs.read_optfile.outputs.remote_state_azure_resource_group_name }}
      remote_state_azure_state_container_name:
        value: ${{ jobs.read_optfile.outputs.remote_state_azure_state_container_name }}
      remote_state_azure_storage_account_name:
        value: ${{ jobs.read_optfile.outputs.remote_state_azure_storage_account_name }}
      remote_state_azure_subscription_id:
        value: ${{ jobs.read_optfile.outputs.remote_state_azure_subscription_id }}
      shared_tfvar_files:
        value: ${{ jobs.read_optfile.outputs.tfvar_files }}
      shared_tfvar_values:
        value: ${{ jobs.read_optfile.outputs.tfvar_values }}
      tag_version_major:
        value: ${{ jobs.read_optfile.outputs.tag_version_major }}
      tag_version_minor:
        value: ${{ jobs.read_optfile.outputs.tag_version_minor }}
      tag_version_prefix:
        value: ${{ jobs.read_optfile.outputs.tag_version_prefix }}
      tag_version_suffix:
        value: ${{ jobs.read_optfile.outputs.tag_version_suffix }}
      terraform_logging:
        value: ${{ jobs.read_optfile.outputs.terraform_logging }}
      terraform_provider_network_mirror:
        value: ${{ jobs.read_optfile.outputs.terraform_provider_network_mirror }}
      terraform_version:
        value: ${{ jobs.read_optfile.outputs.terraform_version }}

permissions:
  id-token: write
  contents: read

jobs:
  read_optfile:
    name: Read optfile
    runs-on: ${{ inputs.runner != '' && inputs.runner || 'ubuntu-latest' }}
    continue-on-error: false
    env:
      azure_client_id: ${{ inputs.azure_client_id }}
      azure_tenant_id: ${{ inputs.azure_tenant_id }}
      cloud_provider: ${{ inputs.cloud_provider }}
      file_is_json: ${{ endsWith(inputs.file_path, '.json') }}
      file_path: ${{ inputs.file_path }}
      AZ_CLIENT_SECRET: ${{ secrets.AZ_CLIENT_SECRET }}

      # Remote State
      remote_state_azure_plan_container_name: tbd
      remote_state_azure_resource_group_name: tbd
      remote_state_azure_state_container_name: tbd
      remote_state_azure_storage_account_name: tbd
      remote_state_azure_subscription_id: tbd

      all_deployments_json: tbd
      deployments_run_order_1_all: tbd
      deployments_run_order_1_apply: tbd
      deployments_run_order_2_all: n/a
      deployments_run_order_2_apply: n/a

      # Misc
      request_id: tbd
      azcli_version: tbd
      branch_ref: tbd
      destroy_enabled: tbd
      destroy_pause_in_seconds: tbd
      push_git_tag: tbd
      tag_version_major: tbd
      tag_version_minor: tbd
      tag_version_prefix: tbd
      tag_version_suffix: tbd
      terraform_logging: tbd
      terraform_provider_network_mirror: tbd
      terraform_version: tbd
      tfvar_files: tbd
      tfvar_values: tbd
    environment:
      name: ${{ inputs.environment_name }}
    outputs:
      # Deployments
      all_deployments_json: ${{ env.all_deployments_json }}
      deployments_run_order_1_all: ${{ env.deployments_run_order_1_all }}
      deployments_run_order_1_apply: ${{ env.deployments_run_order_1_apply }}
      deployments_run_order_2_all: ${{ env.deployments_run_order_2_all }}
      deployments_run_order_2_apply: ${{ env.deployments_run_order_2_apply }}

      # Remote State
      remote_state_azure_plan_container_name: ${{ env.remote_state_azure_plan_container_name }}
      remote_state_azure_resource_group_name: ${{ env.remote_state_azure_resource_group_name }}
      remote_state_azure_state_container_name: ${{ env.remote_state_azure_state_container_name }}
      remote_state_azure_storage_account_name: ${{ env.remote_state_azure_storage_account_name }}
      remote_state_azure_subscription_id: ${{ env.remote_state_azure_subscription_id }}

      # Misc
      request_id: ${{ env.request_id }}
      azcli_version: ${{ env.azcli_version }}
      branch_ref: ${{ env.branch_ref }}
      destroy_enabled: ${{ env.destroy_enabled }}
      destroy_pause_in_seconds: ${{ env.destroy_pause_in_seconds }}
      push_git_tag: ${{ env.push_git_tag }}
      tag_version_major: ${{ env.tag_version_major }}
      tag_version_minor: ${{ env.tag_version_minor }}
      tag_version_prefix: ${{ env.tag_version_prefix }}
      tag_version_suffix: ${{ env.tag_version_suffix }}
      terraform_logging: ${{ env.terraform_logging }}
      terraform_provider_network_mirror: ${{ env.terraform_provider_network_mirror }}
      terraform_version: ${{ env.terraform_version }}
      tfvar_files: ${{ env.tfvar_files }}
      tfvar_values: ${{ env.tfvar_values }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Display environment name
        run: |
          echo "environment name ${{ inputs.environment_name }}"

      - name: Validate `cloud_provider` input
        run: |
          if [[ "${cloud_provider}" != "azure" ]]; then
            echo 'The specified `cloud_provider` value is invalid: `${{ inputs.cloud_provider }}`. Acceptable values is `azure`.'
            exit 1
          fi

      - name: "Verify configuration file exists: ${{ inputs.file_path }}"
        run: |
          if [[ -e ${{ inputs.file_path }} ]]; then
            exit 0
          else
            echo "A configuration file was not found at the specified path: ${{ inputs.file_path }}"
            echo 'Details on how to configure this file can be found at '
            echo '
                {
                    "terraform_version": "1.9.2",
                    "branch_ref_override": "workflows", //branch or tag name
                    "destroy_enabled": true,
                    "uses_component_version_tag_value": false,
                    "remote_state": {
                      "azure": { //storage account backend state information
                        "plan_container_name": "",
                        "resource_group_name": "",
                        "state_container_name": "",
                        "storage_account_name": "",
                        "storage_account_location": "",
                        "subscription_id": "xxxxxxxxxxxxxx"
                      }
                    },
                    "tfvars": {
                      "files": [
                        "tfvars/sbx.tfvars"
                      ]
                    },
                    "deployments": [
                      {
                        "name": "sbx_name",
                        "path": "loops/azapi_call", //location for terraform files
                        "remote_state_key": "sbx.tfstate",
                        "runner": "ubuntu-latest", //hosted or self-hosted
                        "run_plan_only": false
                      }
                    ],
                    "terraform_provider_network_mirror": ""
                  }
            '
            exit 1
          fi

      - name: "Read repoconfigfile.yaml"
        uses: pietrobolcato/action-read-yaml@1.1.0
        id: yaml_read_repoconfigfile_file
        with:
          config: repoconfigfile.yaml

      - name: Set `request_id` value
        run: |
          request_id=${{ steps.yaml_read_repoconfigfile_file.outputs['metadata.requestid'] }}

          echo "request_id = ${request_id}"
          echo "request_id=${request_id}" >> $GITHUB_OUTPUT
          echo "request_id=${request_id}" >> $GITHUB_ENV

      - id: yaml_read_optfile
        name: "YAML - Read ${{ inputs.file_path }}"
        if: ${{ env.file_is_json == 'false' }}
        uses: pietrobolcato/action-read-yaml@1.1.0
        with:
          config: ${{ inputs.file_path }}

      - name: READ FILE CONTENT ${{ inputs.file_path }}
        if: ${{ env.file_is_json == 'false' }}
        run: |
          READFILE=${{ steps.yaml_read_optfile.outputs }}
          echo "READ FILE: ${READFILE}"

      - name: YAML - Set `terraform_version` value
        if: ${{ env.file_is_json == 'false' }}
        run: |
          terraform_version=${{ steps.yaml_read_optfile.outputs['terraform_version'] }}

          if [[ "${terraform_version}" == '' ]]; then
            terraform_version="1.6.2"
          fi

          echo "terraform_version = ${terraform_version}"
          echo "terraform_version=${terraform_version}" >> $GITHUB_ENV

      - name: YAML - Set `terraform_logging` value
        if: ${{ env.file_is_json == 'false' }}
        run: |
          terraform_logging=${{ steps.yaml_read_optfile.outputs['terraform_logging'] }}

          if [[ "${terraform_logging}" == '' ]]; then
            terraform_logging="off"
          fi

          echo "terraform_logging = ${terraform_logging}"
          echo "terraform_logging=${terraform_logging}" >> $GITHUB_ENV

      - name: YAML - Read `terraform_provider_network_mirror` value
        if: ${{ env.file_is_json == 'false' }}
        run: |
          terraform_provider_network_mirror=${{ steps.yaml_read_optfile.outputs['terraform_provider_network_mirror'] }}

          if [[ "${terraform_provider_network_mirror}" != '' ]]; then
            terraform_provider_network_mirror=${terraform_provider_network_mirror} #"https://repo1.site.com/artifactory/api/terraform/terraform-virtual/providers/" # set internal terraform provider
          fi

          echo "terraform_provider_network_mirror = ${terraform_provider_network_mirror}"
          echo "terraform_provider_network_mirror=${terraform_provider_network_mirror}" >> $GITHUB_ENV

      - name: YAML - Set `azcli_version` value
        if: ${{ env.file_is_json == 'false' }}
        run: |
          azcli_version=${{ steps.yaml_read_optfile.outputs['azcli_version'] }}

          if [[ "${azcli_version}" == '' ]]; then
            azcli_version=$(az version | jq -r '."azure-cli"')
          fi

          azcli_installed_version=$(az version | jq -r '."azure-cli"')
          echo "azcli_installed_version = ${azcli_installed_version}"
          echo "azcli_installed_version=${azcli_installed_version}" >> $GITHUB_ENV

          echo "azcli_version = ${azcli_version}"
          echo "azcli_version=${azcli_version}" >> $GITHUB_ENV

      - name: YAML - Set `destroy`-related values
        if: ${{ env.file_is_json == 'false' }}
        run: |
          destroy_enabled=${{ steps.yaml_read_optfile.outputs['destroy_enabled'] }}

          if [[ "${destroy_enabled}" == '' ]]; then
            destroy_enabled=true
          fi

          echo "destroy_enabled = ${destroy_enabled}"
          echo "destroy_enabled=${destroy_enabled}" >> $GITHUB_ENV

          destroy_pause_in_seconds=${{ steps.yaml_read_optfile.outputs['destroy_pause_in_seconds'] }}

          if [[ "${destroy_pause_in_seconds}" == '' ]]; then
            destroy_pause_in_seconds="30"
          fi

          echo "destroy_pause_in_seconds = ${destroy_pause_in_seconds}"
          echo "destroy_pause_in_seconds=${destroy_pause_in_seconds}" >> $GITHUB_ENV

      - name: YAML - Set `remote_state` object
        if: ${{ env.file_is_json == 'false' }}
        run: |
          if [[ "${cloud_provider}" == 'azure' ]]; then
            remote_state_azure_plan_container_name=${{ steps.yaml_read_optfile.outputs['remote_state.azure.plan_container_name'] }}
            remote_state_azure_resource_group_name=${{ steps.yaml_read_optfile.outputs['remote_state.azure.resource_group_name'] }}
            remote_state_azure_state_container_name=${{ steps.yaml_read_optfile.outputs['remote_state.azure.state_container_name'] }}
            remote_state_azure_storage_account_location=${{ steps.yaml_read_optfile.outputs['remote_state.azure.storage_account_location'] }}
            remote_state_azure_storage_account_name=${{ steps.yaml_read_optfile.outputs['remote_state.azure.storage_account_name'] }}
            remote_state_azure_subscription_id=${{ steps.yaml_read_optfile.outputs['remote_state.azure.subscription_id'] }}
          fi

          echo "remote_state_azure_plan_container_name = ${remote_state_azure_plan_container_name}"
          echo "remote_state_azure_plan_container_name=${remote_state_azure_plan_container_name}" >> $GITHUB_ENV

          echo "remote_state_azure_resource_group_name = ${remote_state_azure_resource_group_name}"
          echo "remote_state_azure_resource_group_name=${remote_state_azure_resource_group_name}" >> $GITHUB_ENV

          echo "remote_state_azure_state_container_name = ${remote_state_azure_state_container_name}"
          echo "remote_state_azure_state_container_name=${remote_state_azure_state_container_name}" >> $GITHUB_ENV

          echo "remote_state_azure_storage_account_location = ${remote_state_azure_storage_account_location}"
          echo "remote_state_azure_storage_account_location=${remote_state_azure_storage_account_location}" >> $GITHUB_ENV

          echo "remote_state_azure_storage_account_name = ${remote_state_azure_storage_account_name}"
          echo "remote_state_azure_storage_account_name=${remote_state_azure_storage_account_name}" >> $GITHUB_ENV

          echo "remote_state_azure_subscription_id = ${remote_state_azure_subscription_id}"
          echo "remote_state_azure_subscription_id=${remote_state_azure_subscription_id}" >> $GITHUB_ENV

      - name: YAML - Read `tag_version` object
        if: ${{ env.file_is_json == 'false' }}
        run: |
          tag_version_prefix=${{ steps.yaml_read_optfile.outputs['tag_version.prefix'] }}
          if [[ "${tag_version_prefix}" == '' ]]; then
            tag_version_prefix='v'
          fi
          echo "tag_version_prefix = ${tag_version_prefix}"
          echo "tag_version_prefix=${tag_version_prefix}" >> $GITHUB_ENV

          tag_version_major=${{ steps.yaml_read_optfile.outputs['tag_version.major'] }}
          echo "tag_version_major = ${tag_version_major}"
          echo "tag_version_major=${tag_version_major}" >> $GITHUB_ENV

          tag_version_minor=${{ steps.yaml_read_optfile.outputs['tag_version.minor'] }}
          echo "tag_version_minor = ${tag_version_minor}"
          echo "tag_version_minor=${tag_version_minor}" >> $GITHUB_ENV

          tag_version_suffix=${{ steps.yaml_read_optfile.outputs['tag_version.suffix'] }}
          echo "tag_version_suffix = ${tag_version_suffix}"
          echo "tag_version_suffix=${tag_version_suffix}" >> $GITHUB_ENV

      - name: YAML - Read `push_git_tag` value
        if: ${{ env.file_is_json == 'false' }}
        run: |
          push_git_tag=${{ steps.yaml_read_optfile.outputs['push_git_tag'] }}

          if [[ "${push_git_tag}" == '' ]]; then
            push_git_tag=true
          fi

          echo "push_git_tag = ${push_git_tag}"
          echo "push_git_tag=${push_git_tag}" >> $GITHUB_ENV

      - name: YAML - Read `branch_ref_override` value
        if: ${{ env.file_is_json == 'false' }}
        run: |
          branch_ref=${{ steps.yaml_read_optfile.outputs['branch_ref_override'] }}

          if [[ "${branch_ref}" == '' ]]; then
            if [[ ${{ github.event_name }} == 'pull_request' ]]; then
              branch_ref="pr-${{ github.event.number }}"
            else
              branch_ref="${GITHUB_REF#refs/heads/}"
              branch_ref="${branch_ref#refs/tags/}"
            fi
          fi

          echo "branch_ref = ${branch_ref}"
          echo "branch_ref=${branch_ref}" >> $GITHUB_ENV

      - name: YAML - Read `tfvars` object
        if: ${{ env.file_is_json == 'false' }}
        run: |
          tfvar_files_string=${{ steps.yaml_read_optfile.outputs['tfvars.files.array'] }}

          # Trim leading '[' and trailing ']'
          tfvar_files_string=${tfvar_files_string#"["}
          tfvar_files_string=${tfvar_files_string%"]"}

          tfvar_files=''

          IFS=',' read -ra tfvar_files_array <<< "$tfvar_files_string"
          for tfvar_file in "${tfvar_files_array[@]}";
          do
            tfvar_files="${tfvar_files} -var-file='${tfvar_file}'"
          done

          tfvar_files="$(echo "${tfvar_files}" | xargs)"
          echo "tfvar_files = '${tfvar_files}'"
          echo "tfvar_files=${tfvar_files}" >> $GITHUB_ENV

          tfvar_values_string=${{ steps.yaml_read_optfile.outputs['tfvars.values.array'] }}
          tfvar_values=''
          tfvar_namespace_found=0
          if [[ "${tfvar_values_string}" != '' ]]; then
            # Trim leading '[{' and trailing '}]'
            tfvar_values_string=${tfvar_values_string#"[{"}
            tfvar_values_string=${tfvar_values_string%"}]"}

            tfvar_values_array=()

            IFS='},{' read -ra tfvar_values_raw_array <<< "$tfvar_values_string"
            for tfvar_value in "${tfvar_values_raw_array[@]}";
            do
              # TODO - Refine splitting so that empty entries don't have to be removed below.
              if [[ "${tfvar_value}" != '' ]]; then
                tfvar_values_array+=("${tfvar_value}")
              fi
            done

            for tfvar_value in "${tfvar_values_array[@]}";
            do
              key="$( cut -d ':' -f 1 <<< "${tfvar_value}" )"
              value="$( cut -d ':' -f 2- <<< "${tfvar_value}" )"
              tfvar_values="${tfvar_values} -var='${key}=${value}'"
              if [[ "${key}" == 'namespace' ]]; then
                tfvar_namespace_found=1
              fi
            done

            echo "tfvar_namespace_found = ${tfvar_namespace_found}"
          fi

          override_namespace_var_for_pull_requests=${{ steps.yaml_read_optfile.outputs['override_namespace_var_for_pull_requests'] }}
          if [[ "${override_namespace_var_for_pull_requests}" == '' ]]; then
            override_namespace_var_for_pull_requests=false
          fi

          echo "override_namespace_var_for_pull_requests = '${override_namespace_var_for_pull_requests}'"

          # If not set in the optfile, set the `namespace` value for pull requests.
          if [[ "${override_namespace_var_for_pull_requests}" == 'true' ]] && [[ ${tfvar_namespace_found} -ne 1 ]] && [[ ${{ github.event_name }} == 'pull_request' ]]; then
            tfvar_values="${tfvar_values} -var='namespace=pr-${{ github.event.number }}'"
          fi

          uses_component_version_tag_value=${{ steps.yaml_read_optfile.outputs['uses_component_version_tag_value'] }}
          if [[ "${uses_component_version_tag_value}" == '' ]]; then
            uses_component_version_tag_value=false
          fi

          echo "uses_component_version_tag_value = '${uses_component_version_tag_value}'"

          # Set the "component_version_tag_value" value.
          if [[ "${uses_component_version_tag_value}" == 'true' ]]; then
            if [[ "${{ inputs.ref }}" != '' ]]; then
              tfvar_values="${tfvar_values} -var='component_version_tag_value=${{ inputs.ref }}'"
            else
              echo "Ignoring 'uses_component_version_tag_value' setting because 'ref' value is not explicitly set."
            fi
          fi

          tfvar_values="$(echo "${tfvar_values}" | xargs)"
          echo "tfvar_values = '${tfvar_values}'"
          echo "tfvar_values=${tfvar_values}" >> $GITHUB_ENV

      - name: YAML - Read all deployments and JSON encode
        if: ${{ env.file_is_json == 'false' }}
        run: |
          deployments=${{ steps.yaml_read_optfile.outputs['deployments.array'] }}
          echo "all_deployments_json_raw = ${deployments}"

          # TODO - Yuck! Find a better way to properly JSON-encode the string.
          deployments=$(echo "${deployments}" | sed -e "s/:/\"\:\"/g")            #        :   =>   ,:,
          deployments=$(echo "${deployments}" | sed -e "s/,/\"\,\"/g")            #        ,   =>   ","
          deployments=$(echo "${deployments}" | sed -e "s/{/{\"/g")               #        {   =>   {"
          deployments=$(echo "${deployments}" | sed -e "s/}/\"}/g")               #        }   =>   "}
          deployments=$(echo "${deployments}" | sed -e "s/\[/\[\"/g")             #        [   =>   ["
          deployments=$(echo "${deployments}" | sed -e "s/]/\"]/g")               #        ]   =>   "]
          deployments=$(echo "${deployments}" | sed -e "s/}\",\"{/},{/g")         #    }","{   =>   },{
          deployments=$(echo "${deployments}" | sed -e "s/]\",\"\[/],\[/g")       #    ]","[   =>   ],[
          deployments=$(echo "${deployments}" | sed -e "s/:\"{/:{/g")             #      :"{   =>   :{
          deployments=$(echo "${deployments}" | sed -e "s/}\",/},/g")             #      }",   =>   },
          deployments=$(echo "${deployments}" | sed -e "s/:\"\[/:\[/g")           #      :"[   =>   :[
          deployments=$(echo "${deployments}" | sed -e "s/\[\"{\"/\[{\"/g")       #     ["{"   =>   [{"
          deployments=$(echo "${deployments}" | sed -e "s/]\"}/]}/g")             #      ]"}   =>   ]}
          deployments=$(echo "${deployments}" | sed -e "s/}\"}/}}/g")             #      }"}   =>   }}
          deployments=$(echo "${deployments}" | sed -e "s/}\"]/}]/g")             #      }"]   =>   }]
          deployments=$(echo "${deployments}" | sed -e "s/\"true\"/true/g")
          deployments=$(echo "${deployments}" | sed -e "s/\"false\"/false/g")
          deployments=$(echo "${deployments}" | sed -e "s/\"run_order\":\"1\"/\"run_order\":1/g")
          deployments=$(echo "${deployments}" | sed -e "s/\"run_order\":\"2\"/\"run_order\":2/g")

          echo "all_deployments_json = ${deployments}"
          echo "all_deployments_json={\"deployments\":${deployments}}" >> $GITHUB_ENV

      - name: JSON - Read `terraform_version` value
        if: ${{ env.file_is_json == 'true' }}
        run: |
          terraform_version=$(cat ${file_path} | jq -r .terraform_version)

          if [[ "${terraform_version}" == 'null' ]]; then
            terraform_version="1.6.2"
          fi

          echo "terraform_version = ${terraform_version}"
          echo "terraform_version=${terraform_version}" >> $GITHUB_ENV

      - name: JSON - Read `terraform_logging` value
        if: ${{ env.file_is_json == 'true' }}
        run: |
          terraform_logging=$(cat ${file_path} | jq -r .terraform_logging)

          if [[ "${terraform_logging}" == 'null' ]]; then
            terraform_logging="off"
          fi

          echo "terraform_logging = ${terraform_logging}"
          echo "terraform_logging=${terraform_logging}" >> $GITHUB_ENV

      - name: JSON - Read `terraform_provider_network_mirror` value
        if: ${{ env.file_is_json == 'true' }}
        run: |
          terraform_provider_network_mirror=$(cat ${file_path} | jq -r .terraform_provider_network_mirror)

          if [[ "${terraform_provider_network_mirror}" == 'null' ]]; then
            terraform_provider_network_mirror=${terraform_provider_network_mirror} #'https://registry.terraform.io'
            # "https://repo1.site.com/artifactory/api/terraform/terraform-virtual/providers/" #set terraform private provider repo
          fi

          echo "terraform_provider_network_mirror = ${terraform_provider_network_mirror}"
          echo "terraform_provider_network_mirror=${terraform_provider_network_mirror}" >> $GITHUB_ENV

      - name: JSON - Read `azcli_version` value
        if: ${{ env.file_is_json == 'true' }}
        run: |
          azcli_version=$(cat ${file_path} | jq -r .azcli_version)

          if [[ "${azcli_version}" == 'null' ]]; then
            azcli_version=$(az version | jq -r '."azure-cli"')
          fi

          azcli_installed_version=$(az version | jq -r '."azure-cli"')
          echo "azcli_installed_version = ${azcli_installed_version}"
          echo "azcli_installed_version=${azcli_installed_version}" >> $GITHUB_ENV

          echo "azcli_version = ${azcli_version}"
          echo "azcli_version=${azcli_version}" >> $GITHUB_ENV

      - name: JSON - Read `destroy`-related values
        if: ${{ env.file_is_json == 'true' }}
        run: |
          destroy_enabled=$(cat ${file_path} | jq -r .destroy_enabled)

          if [[ "${destroy_enabled}" == 'null' ]]; then
            destroy_enabled=true
          fi

          echo "destroy_enabled=${destroy_enabled}" >> $GITHUB_ENV

          destroy_pause_in_seconds=$(cat ${file_path} | jq -r .destroy_pause_in_seconds)

          if [[ "${destroy_pause_in_seconds}" == 'null' ]]; then
            destroy_pause_in_seconds="30"
          fi

          echo "destroy_pause_in_seconds=${destroy_pause_in_seconds}" >> $GITHUB_ENV

      - name: JSON - Read `remote_state` object
        if: ${{ env.file_is_json == 'true' }}
        run: |
          if [[ "${cloud_provider}" == 'azure' ]]; then
            remote_state_azure=$(cat ${file_path} | jq .remote_state.azure)
            remote_state_azure_plan_container_name=$(echo $remote_state_azure | jq -r .plan_container_name)
            remote_state_azure_resource_group_name=$(echo $remote_state_azure | jq -r .resource_group_name)
            remote_state_azure_state_container_name=$(echo $remote_state_azure | jq -r .state_container_name)
            remote_state_azure_storage_account_location=$(echo $remote_state_azure | jq -r .storage_account_location)
            remote_state_azure_storage_account_name=$(echo $remote_state_azure | jq -r .storage_account_name)
            remote_state_azure_subscription_id=$(echo $remote_state_azure | jq -r .subscription_id)
          fi

          echo "remote_state_azure_plan_container_name = ${remote_state_azure_plan_container_name}"
          echo "remote_state_azure_plan_container_name=${remote_state_azure_plan_container_name}" >> $GITHUB_ENV

          echo "remote_state_azure_resource_group_name = ${remote_state_azure_resource_group_name}"
          echo "remote_state_azure_resource_group_name=${remote_state_azure_resource_group_name}" >> $GITHUB_ENV

          echo "remote_state_azure_state_container_name = ${remote_state_azure_state_container_name}"
          echo "remote_state_azure_state_container_name=${remote_state_azure_state_container_name}" >> $GITHUB_ENV

          echo "remote_state_azure_storage_account_location = ${remote_state_azure_storage_account_location}"
          echo "remote_state_azure_storage_account_location=${remote_state_azure_storage_account_location}" >> $GITHUB_ENV

          echo "remote_state_azure_storage_account_name = ${remote_state_azure_storage_account_name}"
          echo "remote_state_azure_storage_account_name=${remote_state_azure_storage_account_name}" >> $GITHUB_ENV

          echo "remote_state_azure_subscription_id = ${remote_state_azure_subscription_id}"
          echo "remote_state_azure_subscription_id=${remote_state_azure_subscription_id}" >> $GITHUB_ENV

      - name: JSON - Read `tag_version` object
        if: ${{ env.file_is_json == 'true' }}
        run: |
          tag_version=$(cat ${file_path} | jq .tag_version)

          tag_version_prefix=$(echo $tag_version | jq -r .prefix)
          if [[ "${tag_version_prefix}" == 'null' ]]; then
            tag_version_prefix='v'
          fi
          echo "tag_version_prefix=${tag_version_prefix}" >> $GITHUB_ENV

          tag_version_major=$(echo $tag_version | jq -r .major)
          if [[ "${tag_version_major}" == 'null' ]]; then
            tag_version_major=''
          fi
          echo "tag_version_major=${tag_version_major}" >> $GITHUB_ENV

          tag_version_minor=$(echo $tag_version | jq -r .minor)
          if [[ "${tag_version_minor}" == 'null' ]]; then
            tag_version_minor=''
          fi
          echo "tag_version_minor=${tag_version_minor}" >> $GITHUB_ENV

          tag_version_suffix=$(echo $tag_version | jq -r .suffix)
          if [[ "${tag_version_suffix}" == 'null' ]]; then
            tag_version_suffix=''
          fi
          echo "tag_version_suffix=${tag_version_suffix}" >> $GITHUB_ENV

      - name: JSON - Read `push_git_tag` value
        if: ${{ env.file_is_json == 'true' }}
        run: |
          push_git_tag=$(cat ${file_path} | jq -r .push_git_tag)

          if [[ "${push_git_tag}" == 'null' ]]; then
            push_git_tag=true
          fi

          echo "push_git_tag = ${push_git_tag}"
          echo "push_git_tag=${push_git_tag}" >> $GITHUB_ENV

      - name: JSON - Read `branch_ref_override` value
        if: ${{ env.file_is_json == 'true' }}
        run: |
          branch_ref=$(cat ${file_path} | jq -r .branch_ref_override)

          if [[ "${branch_ref}" == 'null' ]]; then
            if [[ ${{ github.event_name }} == 'pull_request' ]]; then
              branch_ref="pr-${{ github.event.number }}"
            else
              branch_ref="${GITHUB_REF#refs/heads/}"
              branch_ref="${branch_ref#refs/tags/}"
            fi
          fi

          echo "branch_ref = ${branch_ref}"
          echo "branch_ref=${branch_ref}" >> $GITHUB_ENV

      - name: JSON - Read `tfvars` object
        if: ${{ env.file_is_json == 'true' }}
        run: |
          tfvar_files=''
          tfvar_files_json_string=$(cat ${file_path} | jq -c .tfvars.files)
          echo "tfvar_files_json_string = ${tfvar_files_json_string}"
          if [[ "${tfvar_files_json_string}" != 'null' ]]; then
            tfvar_files_entries=$(jq -r '. | to_entries | .[] | .value' <<< "${tfvar_files_json_string}")
            tfvar_files_array=($tfvar_files_entries)

            for key in "${!tfvar_files_array[@]}"
            do
              tfvar_files="${tfvar_files} -var-file='${tfvar_files_array[$key]}'"
            done
          fi

          tfvar_files="$(echo "${tfvar_files}" | xargs)"
          echo "tfvar_files = '${tfvar_files}'"
          echo "tfvar_files=${tfvar_files}" >> $GITHUB_ENV

          tfvar_values=''
          tfvar_namespace_found=0
          tfvar_values_json_string=$(cat ${file_path} | jq -c .tfvars.values)
          if [[ "${tfvar_values_json_string}" != 'null' ]]; then
            tfvar_values_entries=$(jq -r '. | to_entries | .[] | .key + "=" + .value' <<< "${tfvar_values_json_string}")
            tfvar_values_array=($tfvar_values_entries)

            for key in "${!tfvar_values_array[@]}"
            do
              tfvar_values="${tfvar_values} -var='${tfvar_values_array[$key]}'"
              if [[ "${tfvar_values_array[$key]}" == namespace=* ]]; then
                tfvar_namespace_found=1
              fi
            done
          fi

          override_namespace_var_for_pull_requests=$(cat ${file_path} | jq -r .override_namespace_var_for_pull_requests)
          if [[ "${override_namespace_var_for_pull_requests}" == 'null' ]]; then
            override_namespace_var_for_pull_requests=false
          fi

          echo "override_namespace_var_for_pull_requests = ${override_namespace_var_for_pull_requests}"

          # If not set in the optfile, set the `namespace` value for pull requests.
          if [[ "${override_namespace_var_for_pull_requests}" == 'true' ]] && [[ ${tfvar_namespace_found} -ne 1 ]] && [[ ${{ github.event_name }} == 'pull_request' ]]; then
            tfvar_values="${tfvar_values} -var='namespace=pr-${{ github.event.number }}'"
          fi

          # Read the "uses_component_version_tag_value" value
          uses_component_version_tag_value=$(cat ${file_path} | jq -r .uses_component_version_tag_value)
          if [[ "${uses_component_version_tag_value}" == 'null' ]]; then
            uses_component_version_tag_value=false
          fi

          echo "uses_component_version_tag_value = ${uses_component_version_tag_value}"

          # Set the "component_version_tag_value" value.
          if [[ "${uses_component_version_tag_value}" == 'true' ]]; then
            if [[ "${{ inputs.ref }}" != '' ]]; then
              tfvar_values="${tfvar_values} -var='component_version_tag_value=${{ inputs.ref }}'"
            else
              echo "Ignoring 'uses_component_version_tag_value' setting because 'ref' value is not explicitly set"
            fi
          fi

          tfvar_values="$(echo "${tfvar_values}" | xargs)"
          echo "tfvar_values = '${tfvar_values}'"
          echo "tfvar_values=${tfvar_values}" >> $GITHUB_ENV

      - name: JSON - Read all deployments
        if: ${{ env.file_is_json == 'true' }}
        run: |
          all_deployments_json=$(cat ${file_path} | jq -c .deployments)
          echo "all_deployments_json = ${all_deployments_json}"
          echo "all_deployments_json={\"deployments\":${all_deployments_json}}" >> $GITHUB_ENV

      - name: Determine the max `run_order` value for all deployments
        id: read_deployments_max_run_order # Important: Do NOT forget to set `id`!
        env:
          all_deployments_json: ${{ env.all_deployments_json }}
        run: |
          max_run_order=$(echo ${all_deployments_json} | jq -c '[ .deployments[].run_order ] | max')

          if [[ "${max_run_order}" == 'null' ]]; then
            max_run_order=1
          fi

          echo "max_run_order = ${max_run_order}"
          echo "max_run_order=${max_run_order}" >> $GITHUB_OUTPUT

      - name: Read all deployments with `run_order` set to 1.
        env:
          all_deployments_json: ${{ env.all_deployments_json }}
        run: |
          deployments_run_order_1_all=$( echo "${all_deployments_json}" | jq -c '[ .deployments[] | select( ( .run_order == 1 ) or ( .run_order == "1" ) or ( .run_order == null ) ) ]')
          echo "deployments_run_order_1_all = ${deployments_run_order_1_all}"
          echo "deployments_run_order_1_all={\"deployments\":${deployments_run_order_1_all}}" >> $GITHUB_ENV

      - name: Read all deployments with `run_order` set to 1 *and* `run_plan_only` not set to true.
        env:
          all_deployments_json: ${{ env.all_deployments_json }}
        run: |
          deployments_run_order_1_apply=$( echo "${all_deployments_json}" | jq -c '[ .deployments[] | select( ( ( .run_order == 1 ) or ( .run_order == "1" ) or ( .run_order == null ) ) and ( .run_plan_only == null or .run_plan_only != true ) ) ]')
          echo "deployments_run_order_1_apply = ${deployments_run_order_1_apply}"
          echo "deployments_run_order_1_apply={\"deployments\":${deployments_run_order_1_apply}}" >> $GITHUB_ENV

      - name: Read all deployments with `run_order` set to 2.
        if: ${{ steps.read_deployments_max_run_order.outputs.max_run_order > 1 }}
        env:
          all_deployments_json: ${{ env.all_deployments_json }}
        run: |
          deployments_run_order_2_all=$( echo "${all_deployments_json}" | jq -c '[ .deployments[] | select( .run_order == 2 ) ]')
          echo "deployments_run_order_2_all = ${deployments_run_order_2_all}"
          echo "deployments_run_order_2_all={\"deployments\":${deployments_run_order_2_all}}" >> $GITHUB_ENV

      - name: Read all deployments with `run_order` set to 2 *and* `run_plan_only` not set to true.
        if: ${{ steps.read_deployments_max_run_order.outputs.max_run_order > 1 }}
        env:
          all_deployments_json: ${{ env.all_deployments_json }}
        run: |
          deployments_run_order_2_apply=$( echo "${all_deployments_json}" | jq -c '[ .deployments[] | select( .run_order == 2 and ( .run_plan_only == null or .run_plan_only != true ) ) ]')
          echo "deployments_run_order_2_apply = ${deployments_run_order_2_apply}"
          echo "deployments_run_order_2_apply={\"deployments\":${deployments_run_order_2_apply}}" >> $GITHUB_ENV

      - name: Authenticate to Azure using OIDC
        continue-on-error: false
        uses: Azure/login@v2
        if: ${{ env.cloud_provider == 'azure' && env.AZ_CLIENT_SECRET == '' }}
        with:
          client-id: ${{ env.azure_client_id }}
          subscription-id: ${{ env.remote_state_azure_subscription_id }}
          tenant-id: ${{ env.azure_tenant_id }}

      - name: Azure - Validate Azure Storage Account and Containers
        continue-on-error: false
        if: ${{ env.cloud_provider == 'azure' }}
        run: |
          # Using Azure/login@v2 for client secret causes the subscription ID to be flagged as a secret and omitted from output
          if [[ "${{ secrets.AZ_CLIENT_SECRET }}" != "" ]]; then
            az login --service-principal -u ${{ env.azure_client_id }} -p ${{ secrets.AZ_CLIENT_SECRET }} --tenant ${{ env.azure_tenant_id }} --output none
            az account set --subscription ${{ env.remote_state_azure_subscription_id }}
          fi

          echo "Verifying if the ${{ env.remote_state_azure_storage_account_name }} storage account exists..."
          az storage account show --name ${{ env.remote_state_azure_storage_account_name }} --resource-group ${{ env.remote_state_azure_resource_group_name }} --query "id"
          echo ""

          echo "Verifying if the ${{ env.remote_state_azure_state_container_name }} container exists..."
          container_exists=$(az storage container exists --name ${{ env.remote_state_azure_state_container_name }} --account-name ${{ env.remote_state_azure_storage_account_name }} --auth-mode login --query "exists")
          if [[ "${container_exists}" == 'false' ]]; then
            echo "The ${{ env.remote_state_azure_state_container_name }} container does not exist. Creating..."
            az storage container create --name ${{ env.remote_state_azure_state_container_name }} --account-name ${{ env.remote_state_azure_storage_account_name }} --auth-mode login
          else
            echo "The ${{ env.remote_state_azure_state_container_name }} container exists."
          fi
          echo ""

          echo "Verifying if the ${{ env.remote_state_azure_plan_container_name }} container exists..."
          container_exists=$(az storage container exists --name ${{ env.remote_state_azure_plan_container_name }} --account-name ${{ env.remote_state_azure_storage_account_name }} --auth-mode login --query "exists")
          if [[ "${container_exists}" == 'false' ]]; then
            echo "The ${{ env.remote_state_azure_plan_container_name }} container does not exist. Creating..."
            az storage container create --name ${{ env.remote_state_azure_plan_container_name }} --account-name ${{ env.remote_state_azure_storage_account_name }} --auth-mode login
          else
            echo "The ${{ env.remote_state_azure_plan_container_name }} container exists."
          fi
