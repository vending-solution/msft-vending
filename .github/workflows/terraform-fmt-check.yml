name: Run `terraform fmt -check -recursive`

on:
  workflow_call:
    inputs:
      terraform_directory:
        required: false
        type: string
        default: "."
      terraform_version:
        required: false
        type: string
        default: "1.6.2"
      terraform_provider_network_mirror:
        required: false
        type: string
        default: "https://repo1.site.com/artifactory/api/terraform/terraform-virtual/providers/"

      environment_name:
        required: false
        type: string
      ref:
        required: false
        type: string
        default: ""
      runner:
        required: false
        type: string
        default: ubuntu-latest

jobs:
  terraform:
    name: Run terraform fmt -check -recursive
    runs-on: ${{ !startsWith(inputs.terraform_provider_network_mirror, 'https://registry.terraform.io') && 'ubuntu-latest' || inputs.runner != '' && inputs.runner || 'ubuntu-latest' }}
    defaults:
      run:
        working-directory: ${{ inputs.terraform_directory }}
    environment:
      name: ${{ inputs.environment_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - run: terraform --version

      - run: terraform fmt -check -recursive

######### create branch, file, commit and PR
      
      - name: List of the GitHub Actions environment variables on Windows
        run: env
      - name: Create new branch in Repository 1
        id: create-branch
        run: |
          echo 'repo path: [${{ github.workspace }}]'
          echo "current location "
          pwd
          echo "run ls"
          ls
          # cd repo1  # Navigate to the first repository's folder
          branch_name="feature/update-$(date +%s)"
          echo "New branch name: $branch_name"
          git checkout -b $branch_name
          git branch
          echo "branch_name = $branch_name"
          echo "branch_name=${branch_name}" >> $GITHUB_ENV  # Set output using the new method

      - name: Make changes in Repository 1
        run: |
          # cd repo1  # Navigate to the first repository's folder
          echo "${{ inputs.terraform_directory }} This is a new change in Repository 1." >> newFile.txt
          ls
          git add *

      - name: Commit changes in Repository 1
        run: |
          # cd repo1  # Navigate to the first repository's folder
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git commit -m "Automated changes by GitHub Actions in Repository 1"

      - name: Push branch to remote in Repository 1
        run: |
          # cd repo1  # Navigate to the first repository's folder
          git push --set-upstream origin '${{ env.branch_name }}'
          git push origin '${{ env.branch_name }}'

      - name: create pull request
        run: gh pr create -B master -H ${{ env.branch_name }} --title 'Merge ${{ env.branch_name }} into base_branch' --body 'Created by Github action'
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # - name: Create Pull Request for Repository 1
      #   id: create-pr
      #   uses: peter-evans/create-pull-request@v5
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     branch: ${{ env.branch_name }}
      #     base: master  # Target branch for the PR
      #     title: "Automated PR: Updates from GitHub Actions in Repository 1"
      #     body: "This PR contains automated changes made by GitHub Actions in Repository 1."
      #     draft: false  # Set to true if you want a draft PR
      #     labels: automation  # Optional: Add labels to the PR

      - name: Install GitHub CLI
        run: |
          sudo apt-get update && sudo apt-get install -y gh

      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Query PR Information for Repository 1
        id: query-pr
        run: |
          pr_number=${{ steps.create-pr.outputs.pull-request-number }}
          pr_info=$(gh pr view $pr_number --json number,title,body,comments)
          echo "PR Info: $pr_info"

          pr_id=$(echo "$pr_info" | jq -r '.number')
          pr_title=$(echo "$pr_info" | jq -r '.title')
          pr_body=$(echo "$pr_info" | jq -r '.body')
          pr_comments=$(echo "$pr_info" | jq -r '.comments')

          echo "PR ID: $pr_id"
          echo "PR Title: $pr_title"
          echo "PR Description: $pr_body"
          echo "PR Comments: $pr_comments"

          # Set outputs using the new method
          echo "pr_id=$pr_id" >> $GITHUB_ENV
          echo "pr_title=$pr_title" >> $GITHUB_ENV
          echo "pr_body=$pr_body" >> $GITHUB_ENV
          echo "pr_comments=$pr_comments" >> $GITHUB_ENV

      - name: Use PR Information
        run: |
          echo "PR ID: ${{ steps.query-pr.outputs.pr_id }}"
          echo "PR Title: ${{ steps.query-pr.outputs.pr_title }}"
          echo "PR Description: ${{ steps.query-pr.outputs.pr_body }}"
          echo "PR Comments: ${{ steps.query-pr.outputs.pr_comments }}"
